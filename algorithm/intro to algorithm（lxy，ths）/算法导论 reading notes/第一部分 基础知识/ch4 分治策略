## ch4 分治策略

分治策略中，我们递归的求解一个问题，在每层递归中应用如下三个步骤

- 分解（Divide）：将问题划分为一些子问题，子问题的形式与原问题一样，只是规模更小
- 解决（Conquer）：递归的求解出子问题，如果子问题的规模足够小，则停止递归，直接求解
- 合并：将子问题的解组合成原问题的解

当子问题足够大，需要递归求解时：`递归情况（recursive case）`

子问题变得足够小，不再需要递归时，我们说递归已经触底，进入了 进本情况`（base case)`

有时，除了与原问题形式完全一样的规模更小的子问题外，还需要求解与原问题不完全一样的子问题。我们将这些子问题的求解看做合并步骤的一部分。  

#### 递归式

子问题规模不必是原问题规模的一个固定比例

三种求解递归式的方法，即算出算法的 $\Theta$或$O$渐近界的方法

- 代入法：猜测一个界，然后用数学归纳法证明这个界是正确的

- 递归树法：将递归式转换为一棵树，其结点表示不同层次的递归调用产生的代价。然后采用边界和技术来求解递归式

- 主方法：

  ![image-20230915092401320](./assets/image-20230915092401320.png)

不等式的递归式可以用大O符号/$\Omega$符号来描述其解

#### 递归式技术细节

边界条件，向下取整，向上取整。

### 4.1 最大子数组问题

#### 问题描述

![image-20230915093554855](./assets/image-20230915093554855.png)

![image-20230915093601466](./assets/image-20230915093601466.png)

#### 问题求解

##### 暴力求解方法

简单的尝试对每对可能的买进和卖出日期组合，只要卖出日期在买入日期之后

$n天中共有(^n_2)种日期组合，即\Omega(n^2)$

##### 问题变换

![image-20230915093939146](./assets/image-20230915093939146.png)

只有当数组中包含负数时，最大子数组问题才有意义。如果所有数组元素都是非负的，最大子数组问题没有任何难度，因为整个数组的和肯定是最大的

##### 使用分治策略的求解方法

![image-20230915094919343](./assets/image-20230915094919343.png)

- 跨越中点的最大子数组

  ![image-20230915095214801](./assets/image-20230915095214801.png)

  ```c++
  #define INFTY 65535
  int Find_Max_Crossing_Subarray(int *A, int low, int mid, int high)
  {
      int sum_left = -INFTY;
      int sum = 0;
      int index_1 = mid;
      int index_2 = mid + 1;
      for(int i = mid;i >= 0 ;i--)
      {
          sum+= A[i];
          if(sum > sum_left){
              sum_left = sum;
              index_1 = i;
          }
      }
      int sum_right = -INFTY;
      sum = 0;
      for(int i = mid+1;i<=high,i++)
      {
          sum+=A[i];
          if(sum > sum_right)
          {
              sum_right = sum;
              index_2 = i;
          }
      }
      return sum_right+sum_left;
  }
  ```

- 求解对打子数组问题的分治算法

  ```c++
  typedef struct{
      int low;
      int high;
      int sum;
  }return_value;
  return_value find_maximum_subarray(int *A, int low, int high)
  {
      return_value ret,ret_left, ret_right, ret_crossing;
      int mid;
      if(high == low)
      {
          ret.low = low;
          ret.high = hight;
          ret.sum = A[low];
          return ret;
      }
      else 
      {
          mid = ((low+high)/2);
          ret_left = find_maximum_subarray(A, low, mid);
          ret_right = find_maximum_subarray(A, mid+1, hight);
          ret_crossing = find_maximum_subarray(A,low,mid,high);
      }
      if(ret_left.sum >= ret_right.sum && ret_left.sum >= ret_crossing.sum)
      {
          ret.low = ret_left.low;
          ret.high = ret_left.high;
          ret.sum = ret_left.sum;
      }
      else if(ret_right.sum >= ret_left.sum && ret_right.sum>=ret_crossing.sum)
      {
          ret.low = ret_right.low;
          ret.high = ret_right.high;
          ret.sum = ret_right.sum;
      }
      else
      {
          ret.low = ret_crossing.low;
          ret.high = ret_crossing.high;
          ret.sum = ret_crossing.sum;
      }
      return ret;
  }
  ```

#### 分治算法的分析

![image-20230915101451515](./assets/image-20230915101451515.png)

### 4.2 矩阵乘法的Strassen算法

暴力矩阵乘法：每个元素是n个值的和，接受$n\times n$的连个矩阵 A和B，返回它们的乘积

$n \times n$ 矩阵C，每个矩阵都有一个属性rows，给出矩阵的行数

```c++
int **square_matrix_multiply(int **A, int **B, int n)
{
    int c[n][n]={0};
    for(int i = 0;i<n;i++)
    {
        for(int j = 0;j<n;j++)
        {
            c[i][j] = 0;
            for(int k=0;k<n;k++)
                c[i][j]+=a[i][k]+b[k][j];
        }
    }
    return c;
}
```

![image-20230915104304694](./assets/image-20230915104304694.png)

#### 一个简单的分治算法

分块，把一个$n\times n$的矩阵分成 $\frac{n}{2}\times \frac{n}{2}$的矩阵

![image-20230915104832304](./assets/image-20230915104832304.png)

直接的递归分治算法

![image-20230915105030856](./assets/image-20230915105030856.png)

这段伪代码掩盖了一个很重要的实现细节，我们应该怎样分解矩阵。

如果我们真的创建12个新的矩阵，将会花费 $\Theta(n^2)$时间复制矩阵元素

我们可以是使用下标计算，通过原矩阵的一组行下标和一组列下标来指明一个自居还早呢。

![image-20230915110134473](./assets/image-20230915110134473.png)

虽然渐进符号包含了常数因子，但是递归符号并不包含

#### strassen算法

strassen算法的核心思想是令递归树稍微不那么茂盛，即只递归进行7次而不是8次小矩阵的乘法。

减少一次矩阵乘法带来的代价可能是额外几次$n/2 \times n/2$矩阵的加法，但只是常数次。

- ![image-20230915110450047](./assets/image-20230915110450047.png)

  将输入矩阵分解，采用下标计算方法，此步骤花费 $\Theta(1)$的时间

- 创建10个 $n/2 \times n/2$的矩阵 $S_1.S_2,...,S_{10}$，每个矩阵保存步骤1中创建的两个子矩阵的和和差。花费时间为$\Theta(n^2)$

- 用步骤1中创建的子矩阵和步骤2中创建的10个矩阵，递归的计算7个矩阵积$P_1，P_2，...,P_7$，每个矩阵都是 $n/2 \times n/2$的

- 通过$P_i$矩阵的不同组合进行加减运算，计算出结果矩阵C的子矩阵$C_{11},C_{12},C_{21},C_{22}$，花费时间$\Theta(n^2)$

![image-20230915111130648](./assets/image-20230915111130648.png)

##### 算法细节

![image-20230915111742709](./assets/image-20230915111742709.png)

![image-20230915112019692](./assets/image-20230915112019692.png)

![image-20230915112026000](./assets/image-20230915112026000.png)

### 4.3 代入法求解递归式

如何求解递归式

代入法求解递归式分为两步：

- 猜测解的形式
- 用数学归纳法求出解的常数，并证明解是正确的

##### 例子：求解下面递归式的上界

![image-20230915121613902](./assets/image-20230915121613902.png)

![image-20230915145000900](./assets/image-20230915145000900.png)

##### 做出好的猜测

- 如果要求解的递归式与你曾经见过的递归式类似，那么猜测一个类似的解是合理的。
- 先证明递归式较松的上界和下界，然后缩小不确定的范围。

##### 微妙的细节

猜出了正确的递归式解的渐进界，但在归纳证明时失败了。问题常常出在归纳假设不够强，无法证出准确的界。

如果修改猜测，将它减去一个低阶的项，数学证明常常能顺利进行

![image-20230915150349493](./assets/image-20230915150349493.png)

##### 避免陷阱

![image-20230915150434327](./assets/image-20230915150434327.png)

##### 改变变量

![image-20230915150605490](./assets/image-20230915150605490.png)

### 4.4 用递归树方法求解递归式

在递归树中，每个结点表示一个单一子问题的代价。子问题对应某次递归函数调用。我们将树中每层中的代价求和，得到每层代价，然后将所有层的代价求和，得到所有层次的递归调用的总代价。

![image-20230915154316208](./assets/image-20230915154316208.png)

根节点表示递归调用顶层的代价，这时候$cn^2$是无论是否递归调用就需要有的时间，而后每一次递归调用都会产生新的节点，也就是需要把不同级的树的所有节点相加。

![image-20230915154521114](./assets/image-20230915154521114.png)

![image-20230915154842608](./assets/image-20230915154842608.png)

### 4.5 用主方法求解递归式

主方法为如下形式的递归式提供了一种 “菜谱”式的求解方法

$T(n) = aT(n/b) +f(n)$

其中$a \ge 1,b>1$是常数，f（n）是渐进整函数。

![image-20230915163139190](./assets/image-20230915163139190.png)

>从技术的正确性方面来看，此递归式并不是良好定义的，因为n/b可能不是整数。但将a项T（n/b）换成内取整并不会影响递归式的渐近性质。因此，我们通常发现当写下这种形式的分治算法的递归式时，忽略舍入问题是很方便的

#### 主定理

![image-20230915163353631](./assets/image-20230915163353631.png)

![image-20230915163704301](./assets/image-20230915163704301.png)

##### 理解主定理含义

![image-20230915163910961](./assets/image-20230915163910961.png)

##### 使用主方法

![image-20230915164127587](./assets/image-20230915164127587.png)

![image-20230915164222704](./assets/image-20230915164222704.png)

### 4.6 证明主定理

#### 4.6.1 对b的幂证明主定理

$T(n)=aT(n/b)+f(n)$

我们将分析过程分解为三个引理。

- 第一个引理将求解主递归式的问题归约为一个求和表达式的求值问题。
- 第二个引理确定这个和式的界
- 第三个引理将前两个引理合二为一，证明n为b的幂的情况下的主定理

##### 引理4.2

![image-20230915165245579](./assets/image-20230915165245579.png)

pf：

![image-20230915165413043](./assets/image-20230915165413043.png)

![image-20230915165438164](./assets/image-20230915165438164.png)