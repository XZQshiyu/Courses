## ch3 函数的增长

当输入规模足够大，使得只有运行时间的增长量级有关时，我们要研究算法的渐进效率。

也就是说，我们关心当输入规模无限增加时，在极限中，算法的运行时间如何随着输入规模的变大而增加。

### 3.1 渐进记号

用来描述算法渐进运行时间的记号根据定义域为自然数集的函数来定义。

![image-20230914155851205](./assets/image-20230914155851205.png)

#### 渐进记号、函数与运行时间

![image-20230914160518711](./assets/image-20230914160518711.png)

我们常常希望做出一种综合性地覆盖所有输入而不仅仅是最坏情况的陈述。我们将看到完全适合刻画任何输入的运行时间的渐进记号。

##### 记号

![image-20230914160811440](./assets/image-20230914160811440.png)

![image-20230914160930246](./assets/image-20230914160930246.png)

![image-20230914161109248](./assets/image-20230914161109248.png)

###### 一个证明的例子

![image-20230914161221711](./assets/image-20230914161221711.png)

###### 另一个证明的例子（反例）

![image-20230914161303789](./assets/image-20230914161303789.png)

![image-20230914161444151](./assets/image-20230914161444151.png)

##### O记号

当只有一个`渐进上界`时，使用O记号。对于给定的函数 `g(n)`，用O（g(n))来表示以下函数的集合

![image-20230914161716850](./assets/image-20230914161716850.png)

本书中当书写 $f(n) = O(g(n))$时，我们仅仅要求$g(n)$的某个常量倍数是 $f(n)$的渐进上界，而不要求它是一个多么精确的上界

##### $\Omega$记号

![image-20230914162953298](./assets/image-20230914162953298.png)

##### thm3.1 

对任意两个函数$f(n)$和$g(n)$，我们有$f(n) = \Theta(g(n))$，当且仅当$f(n)=O(g(n))$且$f(n)=\Omega(g(n))$

![image-20230914163222973](./assets/image-20230914163222973.png)

#### 等式和不等式中的渐进符号

![image-20230914163412432](./assets/image-20230914163412432.png)

渐进符号出现在等式的左边：

$2n^2 + \Theta(n) = \Theta(n^2)$

无论怎么样选择等号左边的匿名函数，总有一种办法来选择等号右边的匿名函数使等式成立

意指：对任意函数$f(n)\in \Theta(n)$，存在某个函数 $g(n) \in \Theta(n^2)$，使得对所有的n，都有 $2n^2 +f(n)=g(n)$

#### o记号

O记号提供的渐进上界可能是也可能不是渐进紧确的。界$2n^2=O(n^2)$时渐进紧确的，但是界$2n=O(n^2)$不是。

我们使用o记号来表示一个非渐进紧确的上界

![image-20230914163948902](./assets/image-20230914163948902.png)

直观上，在o记号中，当n趋于无穷时，函数$f(n)$相对于$g(n)$来说变得微不足道了

$lim_{n\rightarrow \infty}\frac{f(n)}{g(n)} = 0$

#### $\omega$记号

类似o记号和O记号，使用$\omega$记号来表示一个非渐进紧确的下界

![image-20230914164205957](./assets/image-20230914164205957.png)

![image-20230914164222230](./assets/image-20230914164222230.png)

#### 比较各种函数

##### 传递性：

![image-20230914165142090](./assets/image-20230914165142090.png)

##### 自反性：

![image-20230914165202787](./assets/image-20230914165202787.png)

##### 对称性：

![image-20230914165218343](./assets/image-20230914165218343.png)

##### 转置对称性：

![image-20230914165232012](./assets/image-20230914165232012.png)

![image-20230914165315214](./assets/image-20230914165315214.png)

##### 三分性：

![image-20230914165347400](./assets/image-20230914165347400.png)

### 3.2 标准记号与常用函数

#### 单调性

![image-20230914165658945](./assets/image-20230914165658945.png)

#### 向下取整与向上取整

![image-20230914165910456](./assets/image-20230914165910456.png)

#### 模运算

![image-20230914170003379](./assets/image-20230914170003379.png)

#### 多项式

![image-20230914170031988](./assets/image-20230914170031988.png)

#### 指数

![image-20230914170100710](./assets/image-20230914170100710.png)

![image-20230914170119680](./assets/image-20230914170119680.png)

#### 对数

![image-20230914170211831](./assets/image-20230914170211831.png)

![image-20230914170316919](./assets/image-20230914170316919.png)

#### 阶乘

![image-20230914170710233](./assets/image-20230914170710233.png)

#### 多重函数

![image-20230914225250409](./assets/image-20230914225250409.png)

#### 多重对数函数

![image-20230914225804592](./assets/image-20230914225804592.png)

#### 斐波那契数

![image-20230915090941591](./assets/image-20230915090941591.png)
