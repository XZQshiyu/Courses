## ch2 算法基础

### 2.1 插入排序

![image-20230907142751153](./assets/image-20230907142751153.png)

我们希望排序的数也称为 `关键词`。

##### 插入排序

![image-20230907142959674](./assets/image-20230907142959674.png)

###### 伪代码

```c
Insertion sort(A)
    for j = 2 to A.length
        key = A[j]
        .. Insert A[j] into the sorted sequence A[1...j-1]
        i = j-1
        while i>0 and A[i]>key
            A[i+1] = A[i];
			i = i-1
        A[i+1] = key
```

rewrite in C language

```c++
#define data_type int
void insertion_sort(data_type array[], int length)
{
    int j = 1;
    for(;j<length;j++)
    {
        int key = array[j]
		int i = j - 1;
        while(i >= 0 && array[i] > key)
        {
            array[i+1] = array[i];
            i--;
        }
        array[i+1] = key;
    }
    return;
}
```

###### 循环不变式与插入排序的正确性

![image-20230907144525763](./assets/image-20230907144525763.png)

##### 循环不变式的三条性质

- 初始化：循环的第一次迭代之前，它为真

- 保持：如果循环的某次迭代之前它为真，那么下次迭代之前它仍为真

- 终止：循环终止时，不变式为我们提供一共有用的性质，有助于正确算法是正确的

![image-20230907144709846](./assets/image-20230907144709846.png)

##### 插入排序的证明

![image-20230907144838275](./assets/image-20230907144838275.png)

##### 伪代码的一些约定

![image-20230907144925322](./assets/image-20230907144925322.png)

![image-20230907145348241](./assets/image-20230907145348241.png)

### 2.2 分析算法

假定一种通用的单处理器计算模型 - 随机访问机（RAM）来作为我们的实现技术，算法可以用计算机程序来实现。在RAM模型中，指令一条接一条执行，没有并发操作。

![image-20230907151255987](./assets/image-20230907151255987.png)

#### 插入排序算法的分析

需要的时间依赖于

- 输入
- 输入被排序的程度，需要不同数量的时间来排序两个具有相同规模的输入序列。

一般来说，算法需要的时间与输入的规模同步增长，所以通常把一个程序的运行时间描述成其输入规模的函数。

- `输入规模`：

  ![image-20230907153135211](./assets/image-20230907153135211.png)

- `运行时间`：

  ![image-20230907153214982](./assets/image-20230907153214982.png)

我们由繁到简地改进Insertion-sort运行时间的表达式，最初的公式使用所有语句代价$c_i$，而最终的记号更加简明、更容易处理，简答得多。这种较简单的记号比较易于用来判定一个算法是否比另一个更有效

![image-20230914140737729](./assets/image-20230914140737729.png)

即使对给定规模的输入，一个算法的运行时间也可能依赖于给定的是该规模下的哪个输入。

##### 最佳状况

若输入数组已排好序，则出现最佳情况。这是，对每个j=2,3，...，n，

![image-20230914141137537](./assets/image-20230914141137537.png)

##### 最坏状况

![image-20230914141238091](./assets/image-20230914141238091.png)

![image-20230914141254795](./assets/image-20230914141254795.png)

#### 最坏情况与平均情况分析

![image-20230914141403670](./assets/image-20230914141403670.png)

- 一个算法的最坏情况运行时间给出了任何输入的运行时间的一个上界。知道了这个界，就能保证算法绝不需要更长的时间。我们不必对运行时间做某种负责的猜测并可以期望它不会变得更坏
- 对于某些算法，最坏情况经常出现。
- 平均情况往往与最坏情况大致一样差

#### 增长量级

![image-20230914141915487](./assets/image-20230914141915487.png)

### 2.3 设计算法

#### 2.3.1 分治法

许多有用的算法在结构上时递归的，为了解决一个给定的问题，算法一次或多次递归的调用其自身以解决紧密相关的若干子问题。这些算法典型的遵循分治法的思想：

将原问题分解为几个规模较小但类似于原问题的子问题，递归的求解这些子问题，然后再合并这些子问题的解来建立原问题的解。

分治模式在每层递归时都有三个步骤

- 分解原问题为若干子问题，这些子问题是原问题的规模较小的实例
- 解决子问题，递归的求解各子问题，规模足够小，直接求解
- 合并这些子问题的解成原问题的解

![image-20230914143347936](./assets/image-20230914143347936.png)

![image-20230914143905103](./assets/image-20230914143905103.png)

##### merge的伪代码

![image-20230914145804604](./assets/image-20230914145804604.png)

![image-20230914145808736](./assets/image-20230914145808736.png)

![image-20230914145815314](./assets/image-20230914145815314.png)

![image-20230914145936786](./assets/image-20230914145936786.png)

#### 2.3.2 分析分治算法

当一个算法包含对自身的递归调用时，文往往可以用递归方程或递归式来描述其运行时间，该方程根据在较小输入上的运行时间来描述在规模为n的问题上的总运行时间。

![image-20230914150239115](./assets/image-20230914150239115.png)

##### 归并排序算法的分析

![image-20230914151048264](./assets/image-20230914151048264.png)

![image-20230914151247981](./assets/image-20230914151247981.png)

![image-20230914151431870](./assets/image-20230914151431870.png)
