# chapter 26 最大流

知识框架

- 流网络和流的概念以及最大流问题的形式化定义
- FF method求解最大流问题
- 最大流在 无向二分图中找最大匹配的应用

## 26.1 流网络

### 流网络

$G = (V,E)$， 是一个有向图

- 每条边 $(u,v) \in E$，有一个非负的容量值$c(u,v) \geq 0$
- 如果$(u,v)\in E$，则 $(v,u) \notin E$ (不存在反向边
- 如果$(u,v) \notin E$，定义 $c(u,v) = 0$
- 不允许自循环
- 存在两个特殊结点，源结点s和汇点t
- 对每个结点$v \in V$，存在 $s \rightarrow v \rightarrow t$的路径，流网络是连通的

下图是一个流网络的具体实例

![image-20231223201903641](./assets/image-20231223201903641.png)

### 流

对一个流网络 $G = (V,E)$，其容量函数为c，设s为网络的源结点，t为汇点。G中的流是一个实值函数 $f: V \times V \rightarrow R$

满足下面两条性质

- 容量限制：对于所有结点$u,v \in V$, 要求 $0 \leq f(u,v) \leq c(u,v)$
- 流量守恒：对于所有结点$u \in V - \{s,t\}$，要求进入某个结点的流量=从这个结点出去的流量

$(u,v) \notin E $，从结点u到结点v之间没有流，因此 $f(u,v) = 0$

一个流f的值定义如下

$|f| = \sum_{v \in V}f(s,v) - \sum_{v \in V}f(v,s)$

流f的值是从源节点流出的总流量-流入源结点的总流量

- 当没有流入源结点s的边时，就只包含前一部分

下图是对上图流网络的一个流实例

![image-20231223202623155](./assets/image-20231223202623155.png)

### 最大流问题

给定一个流网络G、一个源结点s、一个汇点t，我们希望找到值最大的一个流

### 反平行边来模拟问题

如果实际的图中存在反平行边，可以转化为一个等价的但不包括反平行边的网络

>反平行边：
>
>如果边$(v_1,v_2)\in E$, $(v_2,v_1) \in E$，称这两条边为反平行边

加入一个新结点$v'$，用$(v_1,v'),(v',v_2)$来替换边 $(v_1,v_2)$

这两条新边的容量都与 $(v_1,v_2)$相同

如下例

![image-20231223202927493](./assets/image-20231223202927493.png)

### 具有多个源结点和多个汇点的网络

加入一个超级源结点s和一个超级汇点t，并加入有向边 $(s,s_i),i = 1,2,...,n$

和有向边 $(t_i,t),i=1,2,...m$

所有有向边的容量均为 $\infty$

如下例

![image-20231223203111192](./assets/image-20231223203111192.png)

## 26.2 Ford-Fulkerson方法

FF方法循环增加流的值

- 开始，对所有的边$(u,v)$，赋初值$f(u,v) = 0$
- 每一次迭代中，在一个关联的 **残存网络**中 找到一条 **增广路径**
- 通过增广路径最其上的边进行流量的修改（增加）
- 直到现有的残存网络中找不到一条增广路径，算法停止，并得到一个最大流

![image-20231223203702052](./assets/image-20231223203702052.png)

上述method运行是基于几个概念之上

- 残存网络
- 增广路径
- 割

### 残存网络

假定有一个流网络 $G = (V,E)$，源结点为s，汇点为t，设f是图G中的一个流，则残存网络$G_f = (V,E_f)$

$E_f$是所有残存容量$c_f$不为0的边的集合，残存容量定义如下

![image-20231223204011701](./assets/image-20231223204011701.png)

直观理解

- (u,v)是流网络中的边时，残存容量为容量-流量
- (u,v)是流网络中的边时，其反平行边(v,u)的残存容量为流量，以此来允许反向流量用于流量的减小
- 其他都为0

一个残存网络的实例，和其增广路径用于诱导新的残存网络产生

![image-20231223204223034](./assets/image-20231223204223034.png)

>残存网络并不满足对流网络的定义，除此之外，残存网络具有与流网络同样的性质
>
>残存网络中的一个流，满足流的定义是针对残存容量$c_f$

#### 利用残存网络的递增(augmentation)

![image-20231223204640667](./assets/image-20231223204640667.png)

- 正向增加，反向抵消

#### 引理26.1

说明了残存网络中的流递增对原先的流f是直接累加的

![image-20231223204811472](./assets/image-20231223204811472.png)

### 增广路径

给定流网络 $G = (V,E)$和流f，增广路径p是残存网络 $G_f$中一条从源结点s到汇点t的简单路径

路径上的最小的残存容量$c_f(v_2,v_3)$，是可以为这条路径上每条边增加的流量的最大值

$c_f(p) = min\{c_f(u,v):(u,v)属于路径p \}$

#### 引理26.2

![image-20231223205110750](./assets/image-20231223205110750.png)

#### 推论26.3

![image-20231223205303039](./assets/image-20231223205303039.png)

### 流网络的切割

一个流是最大流当且仅当其残存网络不包含任何增广路径

#### 切割

流网络 $G = (V,E)$中的一个切割$(S,T)$将结点集合V划分为S 和T = V - S两个结合，使得 $s \in S$， $t \in T$

##### 净流量和容量

![image-20231223205457252](./assets/image-20231223205457252.png)

一个网络的最小切割是整个网络中容量最小的切割

#### 引理26.4

对于给定流f，横跨任何切割的净流量都相同，都等于 $|f|$，即流的值

![image-20231223205550376](./assets/image-20231223205550376.png)

下面的推论说明如何使用切割容量来限定一个流的值

#### 推论26.5

![image-20231223205626654](./assets/image-20231223205626654.png)

#### thm26.6 

![image-20231223205649243](./assets/image-20231223205649243.png)

#### 基本的Ford-Fulkerson算法

![image-20231223205717418](./assets/image-20231223205717418.png)

#### Ford-fulkerson算法的分析

FF算法的运行时间取决于算法第3行时如何寻找增广路径的

最大流问题中的容量常常是整数。如果容量为有理数，则可以通过乘以某个系数来将其转换为整数

![image-20231223205932895](./assets/image-20231223205932895.png)

#### EK算法

![image-20231223205958565](./assets/image-20231223205958565.png)

![image-20231223210109249](./assets/image-20231223210109249.png)

## 26.3 最大二分匹配

![image-20231223210125190](./assets/image-20231223210125190.png)

![image-20231223210131684](./assets/image-20231223210131684.png)

![image-20231223210138598](./assets/image-20231223210138598.png)

![image-20231223210145909](./assets/image-20231223210145909.png)